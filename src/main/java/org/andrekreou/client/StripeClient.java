package org.andrekreou.client;

import jakarta.ws.rs.Consumes;
import jakarta.ws.rs.DELETE;
import jakarta.ws.rs.FormParam;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.POST;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.PathParam;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.QueryParam;
import jakarta.ws.rs.core.MediaType;
import org.andrekreou.dto.response.CreateProductResponse;
import org.andrekreou.dto.response.ProductDeleteResponse;
import org.andrekreou.mapper.StripeApiExceptionMapper;
import org.andrekreou.dto.response.BalanceResponse;
import org.andrekreou.dto.response.BalanceTransactionResponse;
import org.eclipse.microprofile.rest.client.annotation.ClientHeaderParam;
import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;
import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;

/**
 * REST client interface for interacting with Stripe services.
 * <p>
 * This interface defines methods to perform CRUD operations by communicating
 * with Stripe through RESTful API calls.
 * </p>
 * <p>
 * The base URL for the REST calls is configured using the {@code stripe} config key in the
 * {@code application.properties} file.
 * </p>
 * <p>
 * The available methods include:
 * <ul>
 *     <li>Retrieving balance transaction data</li>
 * </ul>
 * </p>
 * <p>
 * This interface is annotated with {@link RegisterRestClient} to indicate that it is a REST client
 * and the base URL is configured via the {@code stripe} configuration key. It is also annotated with
 * {@link ClientHeaderParam} to access the endpoint via a secret key generated by Stripe. Finally, the
 * {@link RegisterProvider} is used to handle the incoming errors from Stripe services.
 * </p>
 *
 * @see RegisterRestClient
 * @see RegisterProvider
 * @see ClientHeaderParam
 */
@RegisterRestClient(configKey = "stripe")
@RegisterProvider(StripeApiExceptionMapper.class)
@Produces(MediaType.APPLICATION_JSON)
@ClientHeaderParam(name = "Authorization", value = "${stripe.sandbox.key}")
public interface StripeClient {

    /**
     * Retrieves a balance transaction that represents funds moving through a Stripe account using
     * a transaction id.
     * <p>
     * This method sends a GET request to the {@code /balance_transactions/{id}} endpoint of Stripe
     * to fetch the details of a balance transaction.
     * </p>
     *
     * @param transactionId the id of the transaction to fetch
     * @return the {@link BalanceTransactionResponse} object representing the balance transaction response
     */
    @GET
    @Path("/balance_transactions/{id}")
    BalanceTransactionResponse retrieveBalanceTransaction(
            @PathParam("id") String transactionId
    );

    /**
     * Retrieves the balance transactions that represent funds moving through a Stripe account.
     * <p>
     * This method sends a GET request to the {@code /balance_transactions} endpoint of Stripe
     * to fetch the details of balance transactions.
     * </p>
     *
     * @param limit the number of transactions to fetch
     * @return the {@link BalanceResponse} object representing the balance transactions response
     */
    @GET
    @Path("/balance_transactions")
    BalanceResponse retrieveBalanceTransactions(
            @QueryParam("limit") int limit
    );

    /**
     * Creates a new product to be purchased from customers.
     * <p>
     * This method sends a POST request to the {@code /products} endpoint of Stripe to create a
     * new product.
     * </p>
     *
     * @param name        the name of the product
     * @param description the description of the product
     * @return the {@link CreateProductResponse} object representing the product creation response
     */
    @POST
    @Path("/products")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    CreateProductResponse create(
            @FormParam("name") String name,
            @FormParam("description") String description,
            @FormParam("default_price_data[currency]") String currency,
            @FormParam("default_price_data[unit_amount]") Integer unitAmount
    );

    /**
     * Deletes a product based on the provided ID.
     * <p>
     * This method sends a DELETE request to the {@code /products} endpoint of Stripe to delete a product.
     * </p>
     *
     * @param productId the ID of the product to be deleted
     * @return the {@link ProductDeleteResponse} object representing the product deletion response
     */
    @DELETE
    @Path("/products/{id}")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    ProductDeleteResponse delete(
            @PathParam("id") String productId
    );
}
